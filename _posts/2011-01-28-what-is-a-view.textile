---
layout: post
title: What is a view?
type: beginner
posturl: http://backbonetutorials.com/what-is-a-view
---

h2. What is a view?

p. Backbone views are used reflect what your applications data model looks like.   They are also used to listen to events and react accordingly.   This tutorial will not be addressing binding models/collections with views.   This tutorial will focus on view functionality and how to use it with a javascript templating library ("underscore.js templating":http://documentcloud.github.com/underscore/#template).

We will be using jQuery 1.5.1 as our DOM manipulator. You could use other libraries such as MooTools or "Sizzle":http://sizzlejs.com/ to do this task but official Backbone.js documentation endorses jQuery.   Backbone.View events will possibly have errors with other libraries other then jQuery.

For the purposes of this demostration we will be implementing a search box. A live example can be found "here":http://jsfiddle.net/thomas/C9wew/6.

{% highlight javascript %}
    SearchView = Backbone.View.extend({
        initialize: function(){
            alert("Alerts suck.");
        }   
    });
    
    var search_view = new SearchView;
    // The initialize function is always calld when instantiating a Backbone View.
{% endhighlight %}

h4. The "el" property

p. The "el" property references the DOM object created in the browser for the Backbone.js view.   Every Backbone.js view has an "el" property and if not user defined Backbone.js will construct it's own, usually a empty div.   

In this tutorial, we are going to set our view's "el" to a container in our html effectivly making Backbone.View the owner of the DOM element.


{% highlight html %}
<div id="search_container"></div>

<script type="text/javascript">
	SearchView = Backbone.View.extend({
		initialize: function(){
			alert("Alerts suck.");
		}   
	});
	
	var search_view = new SearchView({ el: $("#search_container") });
</script>
{% endhighlight %}

p. *Tip*: Keep in mind is that now that we have bound this container element any events we trigger have to be inside of this element.

h4. Loading a template

p. Backbone relies on a library called Underscore.js which rolls it's own micro-templating solution. You can view the documentation "here":http://documentcloud.github.com/underscore/#template. 

We will now implement a "render()" function and call it when the view is initialized.   The "render()" function will load our template into our "el" using jQuery.   


{% highlight html %}
<div id="search_container"></div>

<script type="text/javascript">
	SearchView = Backbone.View.extend({
		initialize: function(){
			this.render();
		},
		render: function(){
			// Compile the template using underscore
			var template = _.template( $("#search_template").html(), {} );
			// Load the compiled HTML into the Backbone "el"
			this.el.html( template );
		}
	});
	
	var search_view = new SearchView({ el: $("#search_container") });
</script>

<script type="text/template" id="search_template">
	<label>Search</label>
	<input type="text" id="search_input" />
	<input type="button" id="search_button" value="Search" />
</script>
{% endhighlight %}

p.  *Tip*: Place all your templates in a file and serve them from a CDN so your users can always have your application cached.

h4. Listening for events

p. To attach a listener to our view we use the "events" attribute of the Backbone.View.   Remember that event listeners can only be attached to children elements of the "el" property.   We are going to attach a "click" listener to our button.



{% highlight html %}
<div id="search_container"></div>

<script type="text/javascript">
    SearchView = Backbone.View.extend({
        initialize: function(){
            this.render();
        },
        render: function(){
            var template = _.template( $("#search_template").html(), {} );
            this.el.html( template );
        },
        events: {
            "click input[type=button]": "doSearch"  
        },
        doSearch: function( event ){
            // Button clicked, you can access the element that was clicked with event.currentTarget
            alert( "Search for " + $("#search_input").val() );
        }
    });
    
    var search_view = new SearchView({ el: $("#search_container") });
</script>

<script type="text/template" id="search_template">
	<label>Search</label>
	<input type="text" id="search_input" />
	<input type="button" id="search_button" value="Search" />
</script>
{% endhighlight %}


h4. Tips and Tricks

p. *Using template variables*

{% highlight html %}
<div id="search_container"></div>

<script type="text/javascript">
	 SearchView = Backbone.View.extend({
		initialize: function(){
			this.render();
		},
		render: function(){
			//Pass variables in using Underscore.js Template
			var variables = { search_label: "My Search" };
			// Compile the template using underscore
			var template = _.template( $("#search_template").html(), variables );
			// Load the compiled HTML into the Backbone "el"
			this.el.html( template );
		},
		events: {
			"click input[type=button]": "doSearch"  
		},
		doSearch: function( event ){
			// Button clicked, you can access the element that was clicked with event.currentTarget
			alert( "Search for " + $("#search_input").val() );
		}
	});
		
	var search_view = new SearchView({ el: $("#search_container") });
</script>

<script type="text/template" id="search_template">
	<!-- Access template variables with <%= %> -->
    <label><%= search_label %></label>
    <input type="text" id="search_input" />
    <input type="button" id="search_button" value="Search" />
</script>
{% endhighlight %}

p.  Post any more questions you would like answered by this tutorial below


h3. Relevant Links
* "backbone.js official website":http://documentcloud.github.com/backbone/
* "this example implemented with google API":http://thomasdavis.github.com/2011/02/05/backbone-views-and-templates.html
* "this examples exact code on jsfiddle.net":http://jsfiddle.net/thomas/C9wew/4/
* "another semi-complete example on jsfiddle.net":http://jsfiddle.net/thomas/dKK9Y/6/

h3. Author

* "Thomas Davis":https://github.com/thomasdavis

h3. Contributors

* None
