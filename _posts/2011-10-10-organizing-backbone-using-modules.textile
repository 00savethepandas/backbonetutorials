---
layout: post
title: Organizing your application using Modules (require.js)
type: intermediate
posturl: http://backbonetutorials.com/organizing-backbone-using-modules
---

h2. Organizing your application using Modules (require.js)

p. Unfortunatly Backbone.js does not tell you how to organize your code leaving many developers in the dark of how to load scripts and lay out their development enviroments.

This was quite a different decision to other Javascript MVC frameworks who were more in favor of setting a development philosophy.

This tutorial will get you started on combining Backbone.js with "AMD":http://www.com (Asynchronous Module Definitions).

h3. What is AMD?

p. "Asynchronous Module Definitions":http:www.com designed to load modular code asynchronously in the browser and server.   It is actually a fork of the Common.js specification.   Many script loaders have built their implementations around AMD, seeing it as the future of modular Javascript development.

This tutorial will use "Require.js":http://requirejs.org to implement a modular and organized Backbone.js.

**I highly recommend using AMD for application development**

Quick Overview
* Modular
* Scalable

h3. Why Require.js?

p. Require.js has a great community.

h3. Getting started

To easily understand this tutorial you should jump straight into the example code base.

h3. "Example Codebase":http://www.com

p. To continue you must really understand what we are aiming towards as described in the introduction.

h3. Bootstrapping your application

p. Using Require.js we are able to define a single entry point for your application that will int
p. Using Require.js we are able to define a single entry point for your application that will int

* Model: Student, Collection: ClassStudents 
* Model: Todo Item, Collection: Todo List
* Model: Animals, Collection: Zoo

Typically your collection will only use one type of model but models themselves are not limited to a type of collection;

* Model: Student, Collection: Gym Class
* Model: Student, Collection: Art Class
* Model: Student, Collection: English Class

Here is a generic Model/Collection example.

{% highlight javascript %}

    var Song = Backbone.Model.extend({
        initialize: function(){
            console.log("Music is the answer");
        }
    });
    
    var Album = Backbone.Collection.extend({
		model: Song
	});

{% endhighlight %}

h3. Building a collection

p. Now we are going to populate a creation with some useful data.

{% highlight javascript %}

    var Song = Backbone.Model.extend({
		defaults: {
			name: "Not specified",
			artist: "Not specified"
		},
        initialize: function(){
            console.log("Music is the answer");
        }
    });
    
    var Album = Backbone.Collection.extend({
		model: Song
	});
	
	var song1 = new Song({ name: "How Bizarre", artist: "OMC" });
	var song2 = new Song({ name: "Sexual Healing", artist: "Marvin Gaye" });
	var song3 = new Song({ name: "Talk It Over In Bed", artist: "OMC" });
	
	var myAlbum = new Album([ song1, song2, song3]);
	console.log( myAlbum.models ); // [song1, song2, song3]
	
{% endhighlight %}

h3. Relevant Links
* "Backbone.js official website":http://documentcloud.github.com/backbone/



h3. Author

* "Thomas Davis":https://github.com/thomasdavis

h3. Contributors

* None
