---
layout: post
title: Organizing your application using Modules (require.js)
type: intermediate
posturl: http://backbonetutorials.com/organizing-backbone-using-modules
---

h2. Organizing your application using Modules (require.js)

p. Unfortunatly Backbone.js does not tell you how to organize your code leaving many developers in the dark of how to load scripts and lay out their development enviroments.

This was quite a different decision to other Javascript MVC frameworks who were more in favor of setting a development philosophy.

This tutorial will get you started on combining Backbone.js with "AMD":http://www.com (Asynchronous Module Definitions).

h3. What is AMD?

p. "Asynchronous Module Definitions":http:www.com designed to load modular code asynchronously in the browser and server.   It is actually a fork of the Common.js specification.   Many script loaders have built their implementations around AMD, seeing it as the future of modular Javascript development.

This tutorial will use "Require.js":http://requirejs.org to implement a modular and organized Backbone.js.

**I highly recommend using AMD for application development**

Quick Overview
* Modular
* Scalable

h3. Why Require.js?

p. Require.js has a great community.

h3. Getting started

To easily understand this tutorial you should jump straight into the example code base.

h3. "Example Codebase":http://www.com

p. To continue you must really understand what we are aiming towards as described in the introduction.

h3. Bootstrapping your application

p. Using Require.js we define a single entry point on our index page.  
We should setup any useful containers that might be used by our Backbone views.

**Note**: The data-main attribute on our single script tag tells Require.js to load the script located at "js/main.js".  It automatically appends the ".js"

{% highlight html %}
<!doctype html>
<html lang="en">
<head>
	<title>Jackie Chan</title>
	<!-- Load the script "js/main.js" as our entry point -->
	<script data-main="js/main" src="js/libs/require/require.js"></script>
</head>
<body>

<div id="container">
  <div id="menu"></div>
  <div id="content"></div>
</div>

</body>
</html>
{% endhighlight %}

p. You should most always end up with quite a light weight index file.   You can serve this off your server and then the rest of your site off a CDN ensuring that everything that can be cached, will be.

h4. What does the bootstrap look like?

p. Our bootstrap file will be responsible for configuring Require.js and loading initially important dependencies.   

In the below example we configure Require.js to create shortcut alias to commonly used scripts such as jQuery, Underscore and Backbone.

Due to the nature of these libraries implementations we actually have to load them in order because they each depend on each other existing in the global namespace(which is bad but is all we have to work with).

Hopefully if the AMD specification takes off these libraries will add code to allow themselves to be loaded asynchronously.   Due to this inconvience the bootstrap is not as intuitive as it could be, I hope to solve this problem in the near future.

We also request a module called "app", this will contain the entireity of our application logic.

**Note:** Modules are loaded relativly to the boot strap and always append with ".js".   So the module "app" will load "app.js" which is in the same directory as the bootstrap.

{% highlight javascript %}

// Require.js allows us to configure shortcut alias
// There usage will become more apparent futher along in the tutorial.
require.config({
  paths: {
    jQuery: "libs/jquery/jquery",
    Underscore: "libs/underscore/underscore",
    Backbone: "libs/backbone/backbone"
  }

});

require([

  // Load our app module and pass it to our definition function
  "app",

  // Some plugins have to be loaded in order due to there non AMD compliance
  // Because these scripts are not "modules" they do not pass any values to the definition function below
  "order!libs/jquery/jquery-min",
  "order!libs/underscore/underscore-min",
  "order!libs/backbone/backbone-min"
], function(App){
  // The "app" dependency is passed in as "App"
  // Again, the other dependencies passed in are not "AMD" therefore don't pass a parameter to this function
  App.initialize();
});

{% endhighlight %}

h3. 

h3. Relevant Links
* "Backbone.js official website":http://documentcloud.github.com/backbone/



h3. Author

* "Thomas Davis":https://github.com/thomasdavis

h3. Contributors

* None
